AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-cicd-sample
  Sample application with multiple Lambda functions and CI/CD

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        LOG_LEVEL: !Ref LogLevel
  Api:
    Auth:
      DefaultAuthorizer: NONE
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
    Description: Log level for Lambda functions

Resources:
  # 共通レイヤー
  CommonLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-common-layer
      Description: Common utilities and libraries
      Content: ./src/layers/common/
      CompatibleRuntimes:
        - python3.9

  # Lambda Function 1: ユーザー管理API
  UserManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-user-management
      CodeUri: ./src/user_management/
      Handler: user_management.lambda_handler
      Layers:
        - !Ref CommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ApiGateway
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
            RestApiId: !Ref ApiGateway
        ListUsers:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref ApiGateway

  # Lambda Function 2: データ処理
  DataProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-data-processor
      CodeUri: ./src/data_processor/
      Handler: data_processor.lambda_handler
      Layers:
        - !Ref CommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProcessedDataTable
      Events:
        ProcessData:
          Type: Api
          Properties:
            Path: /process
            Method: post
            RestApiId: !Ref ApiGateway
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DataBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/

  # Lambda Function 3: 通知サービス
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-notification
      CodeUri: ./src/notification/
      Handler: notification.lambda_handler
      Layers:
        - !Ref CommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Events:
        SendNotification:
          Type: Api
          Properties:
            Path: /notify
            Method: post
            RestApiId: !Ref ApiGateway
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref NotificationTopic

  # Lambda Function 4: ヘルスチェック
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-health-check
      CodeUri: ./src/health_check/
      Handler: health_check.lambda_handler
      Events:
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: get
            RestApiId: !Ref ApiGateway

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      TracingEnabled: true

  # S3 Bucket for data processing
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-data-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # SNS Topic for notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-notifications
      DisplayName: Notification Topic

  # DynamoDB Tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ProcessedDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-processed-data
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  NotificationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-notifications
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # CloudWatch Log Groups
  UserManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UserManagementFunction}
      RetentionInDays: 7

  DataProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DataProcessorFunction}
      RetentionInDays: 7

  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NotificationFunction}
      RetentionInDays: 7

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  UserManagementFunctionArn:
    Description: User Management Lambda Function ARN
    Value: !GetAtt UserManagementFunction.Arn

  DataProcessorFunctionArn:
    Description: Data Processor Lambda Function ARN
    Value: !GetAtt DataProcessorFunction.Arn

  NotificationFunctionArn:
    Description: Notification Lambda Function ARN
    Value: !GetAtt NotificationFunction.Arn

  DataBucketName:
    Description: S3 Bucket for data processing
    Value: !Ref DataBucket