name: Lambda CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  SAM_CLI_TELEMETRY: 0

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest moto boto3
          pip install -r src/layers/common/requirements.txt
      
      - name: Run unit tests
        run: |
          cd src/tests
          python -m pytest test_user_management.py -v
      
      - name: Run linting
        run: |
          pip install flake8
          flake8 src/handlers --max-line-length=120 --ignore=E501,E402
          flake8 src/layers/common --max-line-length=120 --ignore=E501
      
      - name: Run security scan
        run: |
          pip install bandit
          bandit -r src/handlers
          bandit -r src/layers/common

  build:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: SAM build
        run: |
          sam build --use-container
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-artifacts
          path: .aws-sam/build
          retention-days: 5

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: development
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sam-build-artifacts
          path: .aws-sam/build
      
      - name: Deploy to development
        run: |
          # Check if stack exists and is in ROLLBACK_FAILED state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name lambda-cicd-dev --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "STACK_NOT_EXISTS")
          
          if [ "$STACK_STATUS" = "ROLLBACK_FAILED" ]; then
            echo "Stack is in ROLLBACK_FAILED state. Deleting stack first..."
            aws cloudformation delete-stack --stack-name lambda-cicd-dev
            aws cloudformation wait stack-delete-complete --stack-name lambda-cicd-dev
            echo "Stack deleted successfully."
          fi
          
          set +e
          sam deploy \
            --stack-name lambda-cicd-dev \
            --parameter-overrides \
              Environment=dev \
              LogLevel=DEBUG \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-confirm-changeset \
            --resolve-s3
          
          DEPLOY_EXIT_CODE=$?
          if [ $DEPLOY_EXIT_CODE -eq 1 ]; then
            echo "Deploy returned exit code 1, checking if it's 'No changes to deploy'..."
            if sam deploy --stack-name lambda-cicd-dev --parameter-overrides Environment=dev LogLevel=DEBUG --capabilities CAPABILITY_IAM --region ${{ env.AWS_REGION }} --no-confirm-changeset --resolve-s3 2>&1 | grep -q "No changes to deploy"; then
              echo "✅ No changes to deploy - stack is up to date"
            else
              echo "❌ Deploy failed with a different error"
              exit 1
            fi
          elif [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "❌ Deploy failed with exit code $DEPLOY_EXIT_CODE"
            exit $DEPLOY_EXIT_CODE
          else
            echo "✅ Deploy completed successfully"
          fi
          set -e
      
      - name: Deployment success notification
        run: |
          # API Gateway URLを取得
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name lambda-cicd-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          
          echo "Development deployment successful: $API_URL"

  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sam-build-artifacts
          path: .aws-sam/build
      
      - name: Deploy to production
        run: |
          set +e
          sam deploy \
            --stack-name lambda-cicd-prod \
            --parameter-overrides \
              Environment=prod \
              LogLevel=INFO \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-confirm-changeset \
            --resolve-s3
          
          DEPLOY_EXIT_CODE=$?
          if [ $DEPLOY_EXIT_CODE -eq 1 ]; then
            echo "Deploy returned exit code 1, checking if it's 'No changes to deploy'..."
            if sam deploy --stack-name lambda-cicd-prod --parameter-overrides Environment=prod LogLevel=INFO --capabilities CAPABILITY_IAM --region ${{ env.AWS_REGION }} --no-confirm-changeset --resolve-s3 2>&1 | grep -q "No changes to deploy"; then
              echo "✅ No changes to deploy - stack is up to date"
            else
              echo "❌ Deploy failed with a different error"
              exit 1
            fi
          elif [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "❌ Deploy failed with exit code $DEPLOY_EXIT_CODE"
            exit $DEPLOY_EXIT_CODE
          else
            echo "✅ Deploy completed successfully"
          fi
          set -e
      
      - name: Production deployment notification
        run: |
          # API Gateway URLを取得
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name lambda-cicd-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          
          echo "Production deployment successful: $API_URL"
      

